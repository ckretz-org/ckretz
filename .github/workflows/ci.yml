name: CI

on:
  pull_request:
  push:
    branches: [ main ]

jobs:
  scan_ruby:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities in Ruby Dependencies
        run: bin/brakeman

  scan_js:
    runs-on: ubuntu-latest
    needs: [ scan_ruby ]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Scan for security vulnerabilities in Javascript Dependencies
        run: bin/importmap audit

  lint:
    runs-on: ubuntu-latest
    needs: [ scan_js ]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      - name: Lint code for consistent style
        run: bin/rubocop

  test:
    runs-on: ubuntu-latest
    needs: [ lint ]

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
        ports:
          - 5432:5432
        options: --health-cmd="pg_isready" --health-interval=10s --health-timeout=5s --health-retries=3

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval 10s --health-timeout 5s --health-retries 5

    steps:
      - name: Install packages
        run: sudo apt-get update && sudo apt-get install --no-install-recommends -y google-chrome-stable curl libvips postgresql-client libpq-dev

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: .ruby-version
          bundler-cache: true

      -
        name: Run tests
        env:
          RAILS_ENV: test
          DATABASE_URL: postgresql://postgres:postgres@localhost/ckretz_test:5432
          REDIS_URL: redis://localhost:6379/0
          ACTIVE_RECORD_ENCRYPTION_DETERMINISTIC_KEY: deterministickeyaaaaaaaaaaaaaaaa
          ACTIVE_RECORD_ENCRYPTION_KEY_DERIVATION_SALT: keyderivationsaltbbbbbbbbbbbbbbb
          ACTIVE_RECORD_ENCRYPTION_PRIMARY_KEY: primarykeycccccccddddddddddddddd

        run: bin/rails db:setup && bundle exec rake assets:precompile && bin/bundle exec rspec

      - name: Keep screenshots from failed system tests
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: screenshots
          path: ${{ github.workspace }}/tmp/screenshots
          if-no-files-found: ignore

  build_container:
    runs-on: ubuntu-latest
    needs: [test]
    steps:
      -
        name: Checkout code
        uses: actions/checkout@v3
      -
        name: write package.json
        uses: mikefarah/yq@master
        with:
          cmd: yq --output-format=json -i '.sha = "${{ github.sha }}"' ./info.json
      -
        name: Install Ruby and gems
        env:
          BUNDLE_GITHUB__COM: ${{ secrets.BUNDLE_GITHUB__COM }}:x-oauth-basic
        uses: ruby/setup-ruby@v1
        with:
          bundler-cache: true
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: tillawy/ckretz
          tags: |
            type=raw,value=${{ github.sha }}
      -
        name: Docker buildx
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/amd64,linux/arm64
          driver-opts: |
            image=moby/buildkit:master
            network=host
      -
        name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Build and push container image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}